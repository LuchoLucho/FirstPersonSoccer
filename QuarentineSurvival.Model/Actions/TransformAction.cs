using SaavedraCraft.Model.Interface;
using SaavedraCraft.Model.Resources;
using System;
using System.Collections.Generic;
using System.Text;

namespace QuarentineSurvival.Model.Actions
{
    public class TransformAction<T> : IAction<T>
    {
        public bool canExecute(IActionExecutor<T> executor, IHolder<T> holder, IActionable<T> impactedActionable)
        {
            throw new NotImplementedException();
        }

        public void execute(IActionExecutor<T> executor, IHolder<T> holder, IActionable<T> impactedActionable, object param = null)
        {
            holder.removeActionable(impactedActionable);
            TransformableActionableResource<T> newTransformable = new TransformableActionableResource<T>(0, "NewTransformed!");
            holder.addActionable(newTransformable);
        }

        public IActionable<T> getSourceActionable()
        {
            throw new NotImplementedException();
        }
    }

    public class ActionableResource<T> : SimpleResource, IActionable<T>
    {
        private IAction<T> singleAction;

        public ActionableResource(int initialAmount, string name, IAction<T> singleAction, float autoGeneratedIncrementPerTick = 0.1F) : base(initialAmount, name, autoGeneratedIncrementPerTick)
        {
            this.singleAction = singleAction;
        }

        public void NotifyRefreshActions(IHolder<T> receiber)
        {
            throw new NotImplementedException();
        }

        public List<IAction<T>> ShowAvailableActions()
        {
            return new List<IAction<T>> { singleAction };
        }
    }

    public class EncenderLinternaAction<T> : IAction<T>
    {
        public bool canExecute(IActionExecutor<T> executor, IHolder<T> holder, IActionable<T> impactedActionable)
        {
            throw new NotImplementedException();
        }

        public void execute(IActionExecutor<T> executor, IHolder<T> holder, IActionable<T> impactedActionable, object param = null)
        {
            throw new NotImplementedException();
        }

        public IActionable<T> getSourceActionable()
        {
            throw new NotImplementedException();
        }
    }

    public class WearResourceAction<T> : IAction<T>
    {
        public bool canExecute(IActionExecutor<T> executor, IHolder<T> holder, IActionable<T> impactedActionable)
        {
            throw new NotImplementedException();
        }

        public void execute(IActionExecutor<T> executor, IHolder<T> holder, IActionable<T> impactedActionable, object param = null)
        {
            throw new NotImplementedException();
        }

        public IActionable<T> getSourceActionable()
        {
            throw new NotImplementedException();
        }
    }
}
